<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Erick BLog</title>
    <link>http://erickdotphp.github.io/categories/coding/</link>
    <description>Recent content in Coding on Erick BLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</managingEditor>
    <webMaster>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</webMaster>
    <lastBuildDate>Wed, 23 Mar 2016 10:13:51 +0800</lastBuildDate>
    <atom:link href="http://erickdotphp.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>关于Laravel 的 Facades</title>
            <link>http://erickdotphp.github.io/blog/2016/03/23/%E5%85%B3%E4%BA%8Elaravel-%E7%9A%84-facades/</link>
            <pubDate>Wed, 23 Mar 2016 10:13:51 +0800</pubDate>
            <author>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</author>
            <guid>http://erickdotphp.github.io/blog/2016/03/23/%E5%85%B3%E4%BA%8Elaravel-%E7%9A%84-facades/</guid>
            <description>

&lt;p&gt;Laravel的Facades 是在service provider的基础上，声名aliases，使得这个类可以在任何地方直接调用而不再需要通过App获取&lt;/p&gt;

&lt;h4 id=&#34;第一步:fc03adb00e0b0df4693e9b0a4cf59594&#34;&gt;第一步&lt;/h4&gt;

&lt;p&gt;建立service provider 不再赘述&lt;/p&gt;

&lt;h4 id=&#34;第二步:fc03adb00e0b0df4693e9b0a4cf59594&#34;&gt;第二步&lt;/h4&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>关于Laravel 的Service Provider</title>
            <link>http://erickdotphp.github.io/blog/2016/03/22/%E5%85%B3%E4%BA%8Elaravel-%E7%9A%84service-provider/</link>
            <pubDate>Tue, 22 Mar 2016 14:19:55 +0800</pubDate>
            <author>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</author>
            <guid>http://erickdotphp.github.io/blog/2016/03/22/%E5%85%B3%E4%BA%8Elaravel-%E7%9A%84service-provider/</guid>
            <description>

&lt;p&gt;Laravel的服务提供者是非常重要的机制
它最大的特点是可以按需加载
在app.php里面，比如当前环境是测试环境，可以定义需要加载的提供者，上到生产环境中，又可以加载另外一些提供者。&lt;/p&gt;

&lt;p&gt;创建一个服务提供者的过程如下&lt;/p&gt;

&lt;h3 id=&#34;第一步:270f53b4cbb2dc65d4141ed1eb00f702&#34;&gt;第一步&lt;/h3&gt;

&lt;p&gt;创建Services目录，里面写一个Service，这是我们最终代码逻辑要放的地方。&lt;/p&gt;

&lt;p&gt;当然也可以建立Contracts文件夹定义约束它的接口。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;Pay.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace App\Services;


class Pay
{
   

    public function __construct($app)
    {
    }
    
    public function test()
    {
        echo &#39;Hello, I Am Test!&#39;;exit;
    }
    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第二步:270f53b4cbb2dc65d4141ed1eb00f702&#34;&gt;第二步&lt;/h3&gt;

&lt;p&gt;在Providers目录下新建一个我们的提供者，在需要加载的时候提供一个单例给app，具体的操作可以分为绑定，单例等等，详见手册。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;Services\PayServiceProvider.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class PayServiceProvider extends ServiceProvider
{
    public function boot()
    {
        //
    }

    public function register()
    {
        $this-&amp;gt;app-&amp;gt;singleton(&#39;PayService&#39;, function ($app) {
            return new \App\Services\Pay($app);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第三步:270f53b4cbb2dc65d4141ed1eb00f702&#34;&gt;第三步&lt;/h3&gt;

&lt;p&gt;把服务提供者的加载放到app.php里面，在需要的时候加载它&lt;/p&gt;

&lt;p&gt;app.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &#39;providers&#39; =&amp;gt; [
        App\Providers\PayServiceProvider::class,
    ],
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;测试:270f53b4cbb2dc65d4141ed1eb00f702&#34;&gt;测试&lt;/h3&gt;

&lt;p&gt;这样我们就可以随时调用这个新的Service了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$pay = \App::make(&#39;PayService&#39;);
$pay-&amp;gt;test();
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Lumen和Laravel用法上的区别整理（一）</title>
            <link>http://erickdotphp.github.io/blog/2016/03/18/lumen%E5%92%8Claravel%E7%94%A8%E6%B3%95%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86%E4%B8%80/</link>
            <pubDate>Fri, 18 Mar 2016 13:30:55 +0800</pubDate>
            <author>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</author>
            <guid>http://erickdotphp.github.io/blog/2016/03/18/lumen%E5%92%8Claravel%E7%94%A8%E6%B3%95%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86%E4%B8%80/</guid>
            <description>

&lt;p&gt;在把Lumen代码迁移到Laravel框架的时候，遇到了一些问题，虽然Lumen是基于Laravel的，但是也有一些不兼容的地方需要注意。在这里整理了一些Lumen和Laravel框架用法上的区别.&lt;/p&gt;

&lt;p&gt;PS:这次迁移是从Lumen5.1迁移到Laravel5.2版本&lt;/p&gt;

&lt;h2 id=&#34;路由:55e3b0cb695cd827d25429d4e4644e95&#34;&gt;路由&lt;/h2&gt;

&lt;h3 id=&#34;一般的路由:55e3b0cb695cd827d25429d4e4644e95&#34;&gt;一般的路由&lt;/h3&gt;

&lt;p&gt;Lumen是这样写的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$app-&amp;gt;get(&#39;/&#39;, [
    &#39;uses&#39; =&amp;gt; &#39;IndexController@getIndex&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而Laravel是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Route::get(&#39;/&#39;, [
    &#39;uses&#39; =&amp;gt; &#39;IndexController@getIndex&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;有参数并且需要正则的路由:55e3b0cb695cd827d25429d4e4644e95&#34;&gt;有参数并且需要正则的路由&lt;/h3&gt;

&lt;p&gt;Lumen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$app-&amp;gt;get(&#39;/docs/{id:[0-9]+}&#39;, [
    &#39;uses&#39; =&amp;gt; &#39;SupportController@getQuestionDetail&#39;, &#39;as&#39; =&amp;gt; &#39;question_detail&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Laravel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Route::get(&#39;/docs/{id}&#39;, [
    &#39;uses&#39; =&amp;gt; &#39;SupportController@getQuestionDetail&#39;, &#39;as&#39; =&amp;gt; &#39;question_detail&#39;
])-&amp;gt;where(&#39;id&#39;, &#39;[0-9]+&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者可以直接在RouteServiceProvider里面定义全局正则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public function boot(Router $router)
    {
        //
        $router-&amp;gt;pattern(&#39;id&#39;, &#39;[0-9]+&#39;);

        parent::boot($router);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;namespace:55e3b0cb695cd827d25429d4e4644e95&#34;&gt;Namespace&lt;/h3&gt;

&lt;p&gt;路由组里面的Namespace&lt;/p&gt;

&lt;p&gt;Lumen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$app-&amp;gt;group([&#39;namespace&#39; =&amp;gt; &#39;App\Http\Controllers\Admin&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Laravel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Route::group([&#39;namespace&#39; =&amp;gt; &#39;Admin&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;路由多文件:55e3b0cb695cd827d25429d4e4644e95&#34;&gt;路由多文件&lt;/h3&gt;

&lt;p&gt;Lumen是在bootstrap/app.php里面:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$app-&amp;gt;group([&#39;namespace&#39; =&amp;gt; &#39;App\Http\Controllers&#39;], function ($app) {
    require __DIR__.&#39;/../app/Http/routes.php&#39;;
    require __DIR__.&#39;/../app/Http/routesAdmin.php&#39;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Laravel是在RouteServiceProvider里面:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$router-&amp;gt;group([&#39;namespace&#39; =&amp;gt; $this-&amp;gt;namespace], function ($router) {
    require app_path(&#39;Http/routes.php&#39;);
    require app_path(&#39;Http/routesAdmin.php&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Lumen和Laravel用法上的区别整理（二）</title>
            <link>http://erickdotphp.github.io/blog/2016/03/18/lumen%E5%92%8Claravel%E7%94%A8%E6%B3%95%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86%E4%BA%8C/</link>
            <pubDate>Fri, 18 Mar 2016 13:30:55 +0800</pubDate>
            <author>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</author>
            <guid>http://erickdotphp.github.io/blog/2016/03/18/lumen%E5%92%8Claravel%E7%94%A8%E6%B3%95%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86%E4%BA%8C/</guid>
            <description>

&lt;p&gt;接前文&lt;/p&gt;

&lt;h2 id=&#34;配置:d9a8bcab7bc0655cdd3394d58d1d7ef3&#34;&gt;配置&lt;/h2&gt;

&lt;h3 id=&#34;app-php:d9a8bcab7bc0655cdd3394d58d1d7ef3&#34;&gt;app.php&lt;/h3&gt;

&lt;p&gt;Lumen是在bootsrap文件夹下面&lt;/p&gt;

&lt;p&gt;Laravel是在config里面&lt;/p&gt;

&lt;p&gt;这里包括两者都包括了Service Provider的注册和alias的声明只是在写法上略有不同&lt;/p&gt;

&lt;h3 id=&#34;中间件的定义:d9a8bcab7bc0655cdd3394d58d1d7ef3&#34;&gt;中间件的定义&lt;/h3&gt;

&lt;p&gt;Lumen是直接写在app.php里面的&lt;/p&gt;

&lt;p&gt;Laravel是写在Kernel.php里面，另外Laravel支持组的概念例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    protected $middlewareGroups = [
        &#39;web&#39; =&amp;gt; [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
        ],

        &#39;api&#39; =&amp;gt; [
            &#39;throttle:60,1&#39;,
        ],
    ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;待续&amp;hellip;&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>关于Laravel 源码分析和一些小技巧</title>
            <link>http://erickdotphp.github.io/blog/2016/03/18/%E5%85%B3%E4%BA%8Elaravel-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
            <pubDate>Fri, 18 Mar 2016 13:30:55 +0800</pubDate>
            <author>erickdotphp&lt;at&gt;gmail&lt;dot&gt;com (erickdotphp)</author>
            <guid>http://erickdotphp.github.io/blog/2016/03/18/%E5%85%B3%E4%BA%8Elaravel-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
            <description>&lt;p&gt;Laravel 的多语言是可以覆盖的，app.php里面定义的fallback_locale是基础语言包，如果一个词在当前语言包里面没有的时候就会去基础语言包里面找&lt;/p&gt;

&lt;p&gt;Laravel 的 Cookie是经过加密的，任何本地改动都会造成cookie失效
赋值方法是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cookie:queue(name,value,min);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取值方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$request-&amp;gt;cookie[name];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想不加密，就还是用PHP原生方法吧&lt;/p&gt;

&lt;p&gt;Kernel中定义的web中间件有四个&lt;/p&gt;

&lt;p&gt;EncryptCookies 加密和解谜Cookie&lt;/p&gt;

&lt;p&gt;AddQueuedCookiesToResponse 写入Cookie 就是之前queueinquiry的&lt;/p&gt;

&lt;p&gt;StartSession 相当于session_start&lt;/p&gt;

&lt;p&gt;VerifyCsrfToken 方式CSRF攻击的&lt;/p&gt;

&lt;p&gt;api的就只有ThrottleRequests一个，主要是用来限制单位时间内请求次数的防止被刷&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
