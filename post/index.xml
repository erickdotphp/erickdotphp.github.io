<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Mar 2016 18:22:14 +0800</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git多分支处理</title>
      <link>/post/git-branch/</link>
      <pubDate>Mon, 14 Mar 2016 18:22:14 +0800</pubDate>
      
      <guid>/post/git-branch/</guid>
      <description>&lt;p&gt;如果需要在同一套代码中控制多个远程版本&lt;/p&gt;

&lt;p&gt;###查看当前的远端
&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###增加远端
&lt;code&gt;$ git remote add 远端名 远端git地址&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样推送和拉取的之后只要在后面加上远端名和分支名就可以&lt;/p&gt;

&lt;p&gt;###拉取远端
&lt;code&gt;$ git pull inter master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###推送远端
&lt;code&gt;$ git push inter master&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git的常用么命令</title>
      <link>/post/git/</link>
      <pubDate>Mon, 14 Mar 2016 18:22:14 +0800</pubDate>
      
      <guid>/post/git/</guid>
      <description>&lt;p&gt;###生成密钥
&lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###添加公钥到git账户&lt;/p&gt;

&lt;p&gt;###检测是否成功
&lt;code&gt;ssh -T git@github.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###获取代码
git clone git://github.com:xxxx/test.git ##以gitreadonly方式克隆到本地，只可以读&lt;/p&gt;

&lt;p&gt;git clone git@github.com:xxx/test.git  ##以SSH方式克隆到本地，可以读写&lt;/p&gt;

&lt;p&gt;git clone &lt;a href=&#34;https://github.com/xxx/test.git&#34;&gt;https://github.com/xxx/test.git&lt;/a&gt; ##以https方式克隆到本地，可以读写&lt;/p&gt;

&lt;p&gt;git fetch git@github.com:xxx/xxx.git  ##获取到本地但不合并&lt;/p&gt;

&lt;p&gt;git pull git@github.com:xxx/xxx.git ##获取并合并内容到本地&lt;/p&gt;

&lt;p&gt;###本地配置
git config &amp;ndash;global user.name &amp;lsquo;erick&amp;rsquo;&lt;br /&gt;
git config &amp;ndash;global user.email &amp;lsquo;erick@123.com&amp;rsquo; #全局联系方式，可选&lt;/p&gt;

&lt;p&gt;###新建Git项目并提交到Github
mkdir testdir &amp;amp; cd testdir&lt;br /&gt;
touch README.md&lt;br /&gt;
git init #初始化一个本地库&lt;br /&gt;
git add README.md #添加文件到本地仓库&lt;br /&gt;
git rm README.md #本地倒库内删除&lt;br /&gt;
git commit -m &amp;ldquo;first commit&amp;rdquo; #提交到本地库并备注，此时变更仍在本地。&lt;br /&gt;
git commit -a  ##自动更新变化的文件，a可以理解为auto&lt;br /&gt;
git remote add xxx git@github.com:xxx/xxx.git  #增加一个远程服务器的别名。&lt;br /&gt;
git remote rm xxx   ##删除远程版本库的别名&lt;br /&gt;
git push -u remotename master #将本地文件提交到Github的remoname版本库中。此时才更新了本地变更到github服务上。&lt;/p&gt;

&lt;p&gt;###创建和合并分支
git branch #显示当前分支是master&lt;br /&gt;
git branch new-feature  #创建分支&lt;br /&gt;
git checkout new-feature  #切换到新分支&lt;br /&gt;
vi page_cache.inc.php&lt;br /&gt;
git add page_cache.inc.php&lt;br /&gt;
git commit -a -m &amp;ldquo;added initial version of page cache&amp;rdquo;&lt;br /&gt;
git push origin new-feature  ##把分支提交到远程服务器，只是把分支结构和内容提交到远程，并没有发生和主干的合并行为。&lt;/p&gt;

&lt;p&gt;###如果new-feature分支成熟了，觉得有必要合并进master
git checkout master  #切换到新主干&lt;br /&gt;
git merge new-feature  ##把分支合并到主干&lt;br /&gt;
git branch #显示当前分支是master&lt;br /&gt;
git push  #此时主干中也合并了new-feature的代码&lt;/p&gt;

&lt;p&gt;###忽略某个文件更新的命令
&lt;code&gt;git update-index --assume-unchanged&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;目前只知道怎么忽略单个文件&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos7 上 安装 Composer</title>
      <link>/post/composer/</link>
      <pubDate>Mon, 14 Mar 2016 12:30:55 +0800</pubDate>
      
      <guid>/post/composer/</guid>
      <description>&lt;p&gt;安装前请确保 环境中有PHP
可以用php -v查看&lt;/p&gt;

&lt;p&gt;###下载
&lt;code&gt;$ curl -sS https://getcomposer.org/installer| php -- --install-dir=/home&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###移动到可执行目录
&lt;code&gt;$ mv composer.phar /usr/local/bin/composer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###配置环境变量
&lt;code&gt;$ export PATH=$PATH:/usr/local/bin&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos7 上 安装和配置 Sublime Text3</title>
      <link>/post/sublime/</link>
      <pubDate>Mon, 14 Mar 2016 12:30:55 +0800</pubDate>
      
      <guid>/post/sublime/</guid>
      <description>&lt;p&gt;###下载最新的包
&lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;http://www.sublimetext.com/3&lt;/a&gt;
下载tarball
&lt;code&gt;$ tar jxvf sublime_text_3_build_3083_x64.tar.bz2  -C /opt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###移动到系统目录
&lt;code&gt;$ mv sublime_text_3 /opt/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###创建连接
&lt;code&gt;$ ln -s /opt/sublime_text_3/sublime_text /usr/bin/sublime&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###移动到系统目录下
&lt;code&gt;$ cp /opt/sublime_text_3/sublime_text.desktop /usr/share/applications&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###修改配置文件
&lt;code&gt;$ cd /usr/share/applications&lt;/code&gt;
&lt;code&gt;$ vim sublime_text.desktop&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Version=1.0
Type=Application
Name=Sublime Text
GenericName=Text Editor
Comment=Sophisticated text editor for code, markup and prose
Exec=/opt/sublime_text_3/sublime_text %F
Terminal=false
MimeType=text/plain;
Icon=/opt/sublime_text_3/Icon/48x48/sublime-text.png
Categories=TextEditor;Development;
StartupNotify=true
Actions=Window;Document;

[Desktop Action Window]
Name=New Window
Exec=/opt/sublime_text_3/sublime_text -n
OnlyShowIn=Unity;

[Desktop Action Document]
Name=New File
Exec=/opt/sublime_text_3/sublime_text --command new_file
OnlyShowIn=Unity;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些都做完以后 sublime的快捷方式会出现在   应用程序=&amp;gt;编程 里面&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos7 上 安装 mariadb</title>
      <link>/post/mariadb/</link>
      <pubDate>Mon, 14 Mar 2016 11:30:55 +0800</pubDate>
      
      <guid>/post/mariadb/</guid>
      <description>&lt;p&gt;###全部删除MySQL/MariaDB
MySQL 已经不再包含在 CentOS 7 的源中，而改用了 MariaDB;
1、使用rpm -qa | grep mariadb搜索 MariaDB 现有的包：
如果存在，使用rpm -e &amp;ndash;nodeps mariadb-*全部删除：
2、使用rpm -qa | grep mariadb搜索 MariaDB 现有的包：
如果存在，使用yum remove mysql mysql-server mysql-libs compat-mysql51全部删除；&lt;/p&gt;

&lt;p&gt;###添加MariaDB的yum源
1、创建 /etc/yum.repos.d/MariaDB.repo：
2、添加yum源,该文件中添加如图所示内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# MariaDB 10.1 CentOS repository list - created 2015-11-19 02:26 UTC
# http://mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###安装 MariaDB
&lt;code&gt;$ yum install MariaDB-server MariaDB-client&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###启动、配置MariaDB
&lt;code&gt;$ service mysql start&lt;/code&gt;
&lt;code&gt;$ mysql_secure_installation&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos7 上 安装 ZendServer</title>
      <link>/post/zendserver/</link>
      <pubDate>Mon, 14 Mar 2016 10:30:55 +0800</pubDate>
      
      <guid>/post/zendserver/</guid>
      <description>&lt;p&gt;###获取官方包
&lt;code&gt;$ wget http://downloads.zend.com/zendserver/8.5.1/ZendServer-8.5.1-RepositoryInstaller-linux.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###关闭防火墙
&lt;code&gt;$ vim /etc/selinux/config&lt;/code&gt;
SELINUX=disabled
&lt;code&gt;$ setenforce 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###安装ZS
&lt;code&gt;./install_zs.sh 5.6 nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###远程访问不到zend server 需要关闭iptable
&lt;code&gt;$ service iptables status&lt;/code&gt;
&lt;code&gt;$ service iptables stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###配置文件的路径如下
nginx  vim /etc/nginx/nginx.conf
php /usr/local/zend/etc/php.ini
fpm /usr/local/zend/etc/php-fpm.conf
虚拟机 /usr/local/zend/etc/sites.d&lt;/p&gt;

&lt;p&gt;###都配置好以后可以访问主机地址了
&lt;a href=&#34;http://localhost:10081/ZendServer/&#34;&gt;http://localhost:10081/ZendServer/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###另外破解方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim /usr/local/zend/gui/module/Configuration/src/Configuration/License/License.php&lt;/code&gt;
所有判断改成return true;&lt;/p&gt;

&lt;p&gt;###FAQ&lt;/p&gt;

&lt;p&gt;Nginx 报错 no port in upstream &amp;ldquo;fastcgi_backend&amp;rdquo;,因为没有配置fastcgi
在/etc/nginx/nginx.conf在
&lt;code&gt;access_log  /var/log/nginx/access.log  main;&lt;/code&gt;
后面加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    fastcgi_read_timeout 300;
    upstream fastcgi_backend {
       server   unix:/usr/local/zend/tmp/php-fpm.sock;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中fastcgi_read_timeout 300;是为了防止ngxin 504超时错误&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>这个博客是怎么搭建起来的</title>
      <link>/post/hugo/</link>
      <pubDate>Fri, 11 Mar 2016 18:22:14 +0800</pubDate>
      
      <guid>/post/hugo/</guid>
      <description>

&lt;h2 id=&#34;大概原理:32ab7241d48fcc174c877413a917f8cf&#34;&gt;大概原理&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先hugo，用来生成博客的静态文件
hugo是用go语言写的，效率比较高&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;把生成好的静态页面通过github pages 上传到github上&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;就做好了&lt;/p&gt;

&lt;h2 id=&#34;安装:32ab7241d48fcc174c877413a917f8cf&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;可以直接下载可执行文件 linux windows都有
官网地址 &lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;创建新的站点:32ab7241d48fcc174c877413a917f8cf&#34;&gt;创建新的站点&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ hugo new site blog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会生成一个文件夹，里面的config.toml是配置文件
这是一个TOML文件，全称是Tom’s Obvious, Minimal Language，这是它的作者GitHub联合创始人Tom Preston-Werner 觉得YAML不够优雅，捣鼓出来的一个新格式。如果你不喜欢这种格式，你可以将config.toml替换为YAML格式的config.yaml，或者json格式的config.json。hugo都支持。&lt;/p&gt;

&lt;h2 id=&#34;创建新页面:32ab7241d48fcc174c877413a917f8cf&#34;&gt;创建新页面&lt;/h2&gt;

&lt;p&gt;cd 到 blog下&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo new about.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样会把文件生成在contents目录下&lt;/p&gt;

&lt;p&gt;也可以放在文件夹下&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo new post/first.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;md就是markdown格式，很方便&lt;/p&gt;

&lt;p&gt;默认是没有模板的，可以去下载模板&lt;/p&gt;

&lt;p&gt;地址是 &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;找好模板之后
创建themes文件夹&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ mkdir themes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;$ git clone &lt;a href=&#34;https://github.com/spf13/模板名.git&#34;&gt;https://github.com/spf13/模板名.git&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;启动本地服务器:32ab7241d48fcc174c877413a917f8cf&#34;&gt;启动本地服务器&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ hugo server --theme=base16 --buildDrafts --watch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;watch 是监控文章更新  buildDrafts是生成content里面的页面&lt;/p&gt;

&lt;h2 id=&#34;生成静态站点:32ab7241d48fcc174c877413a917f8cf&#34;&gt;生成静态站点&lt;/h2&gt;

&lt;p&gt;在blog目录下&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo --theme=base16 --buildDrafts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;生成好以后把public里面的文件上传到github上就可以了&lt;/p&gt;

&lt;p&gt;参考文章
&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;http://www.gohugo.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>